---
layout: post
title: Clean Up Your Specs
---

{{ page.title }}
================


Often times I'll come across some rspec code that looks like this:
<script src="https://gist.github.com/1423678.js?file=bad_spec.rb"></script>


First off, 'it' statements shouldn't start with 'should'. The description should say something more along the lines of %{it "only allows strings that include the letter 'a'"}. The reason for this is that when we run these specs with the documentation format, we want to see something like:
<pre>
method name
  only allows strings that include the letter 'a'
</pre>


It just reads better, and you get to type less (read <a href='http://justinko.me/post/1534681350/rspec-should-i-use-it-should'>this</a> post for more info on why you shouldn't use 'should')


You should be aware of how you're asserting equality also. In this test we have:
.should == true
If this were testing equality, we would want to use RSpec's built in 'eq' operator (there's also equal, eql, and be, <a href='https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/equality-matchers'>read</a>)
My main reason for wanting 'eq' over '==' is for readability. If I wanted to see if two objects were exactly the same, I'd use :some_sym.equal?(:some_sym), which should return true since :some_sym is the exact same object in both instances.
There's also a couple more helpers available to us, built into RSpec. What we'd use here is ".should be_true" or ".should be_false"

The last problem I have with this test is that it includes more than one assertion in the actual test. There's a couple different ways to re-write it so there's only one assertion per 'it' statement. The way I choose may or may not fit with your coding style, but here's how I typically refactor these specs:
<script src="https://gist.github.com/1423678.js?file=good_spec.rb"></script>

Take note that this contrived example is still a poorly written and brittle test. I'm just using it to highlight some flaws I've seen in using matchers and assertions. The day may come when I re-write this test to be a better example. But it is not this day. Go forth and conquer.
